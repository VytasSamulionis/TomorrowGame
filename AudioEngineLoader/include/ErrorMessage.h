/** @file ErrorMessage.h
Error handling.
Class ErrorMessage is used for exceptions. 
Its main task is to generate and give an error message.
*/
#pragma once

#include <Windows.h>

/** Throw error with additional information macro. */
#define THROW_DETAILED_ERROR(errorCode, details) { throw ErrorMessage (errorCode, __FILE__, __LINE__, details); }
/** Throw error without additional information macro. */
#define THROW_ERROR(errorCode) { throw ErrorMessage (errorCode, __FILE__, __LINE__); }
/** Maximum length of a generated error message. */
#define MAX_MSG_LENGTH 550
/** Out of memory error's description. */
#define ERRCDESC_OUT_OF_MEM "Out of memory."
/** A failed call to API error's description. */
#define ERRCDESC_API_CALL "Unsuccessful API call."
/** File not found error's description. */
#define ERRCDESC_FILE_NOT_FOUND "File not found."
/** Bad file error's description. */
#define ERRCDESC_BAD_FILE "File is corrupted."
/** Out of range error's description. */
#define ERRCDESC_OUT_OF_RANGE "Out of range."
/** No device error's description. */
#define ERRCDESC_NO_DEVICE "Device is not ready."
/** Unknown vertex format error's description. */
#define ERRCDESC_UNKNOWN_FVF "Unknown vertex format."
/** Invalid parameter error's description. */
#define ERRCDESC_INVALID_PARAMETER "Inavlid parameter."
/** Unprepared error's description. */
#define ERRCDESC_NOT_READY "Preconditions are not met."
/** Undefined error's description. */
#define ERRCDESC_UNDEFINED "Undefined error occured."

/** Error codes enumeration. */
enum ERROR_CODE {
    ERRC_OUT_OF_MEM = 1,        /**< Out of memory error */
    ERRC_API_CALL,          /**< A failed call to API (eg. DirectX API) */
    ERRC_FILE_NOT_FOUND,    /**< File not found */
    ERRC_BAD_FILE,          /**< The file is invalid (eg. wrong format) */
    ERRC_OUT_OF_RANGE,      /**< Out of range error */
    ERRC_NO_DEVICE,         /**< Device is not initialized */
    ERRC_UNKNOWN_FVF,       /**< The specified vertex format is invalid */
    ERRC_INVALID_PARAMETER, /**< The specified parameter is invalid */
    ERRC_NOT_READY,         /**< Method's preconditions are not met. */
    ERRC_UNDEFINED          /**< Undefined error */
};

/** Generates the error message.
Error message is generated by specified:
@li Error code
@li File name
@li Line number
@li Additional information

In order to change the error code description, the error message have to be redefined.
@see ERROR_CODE */
class ErrorMessage {
public:
    /** Constructor.
    @param[in] _errorCode error code
    @param[in] _filename the name of the file where error has occured
    @param[in] _line the number of the line in the file where error has occured
    @param[in] _details the string of additional information about the error.
    By default it is NULL

    If _errorCode is not a member of an ERROR_CODE enumeration, 
    _errorCode is interpreted as ERRC_UNDEFINED.
    @see ERROR_CODE */
    ErrorMessage (ERROR_CODE _errorCode, const char* _filename, UINT _line, const char* _details = NULL);

    /** Returns generated error message.
    Firstly it takes the error code description.
    Then specifies the file and the line.
    After that, if there is any additional information, 
    it adds that to the message. */
    const char* GetErrorMessage ();

    /** Setter: the error code.
    @param[in] _errorCode the error code
    @see ERROR_CODE */
    void SetErrorCode (ERROR_CODE _errorCode);

    /** Getter: the error code.
    @see ERROR_CODE */
    ERROR_CODE GetErrorCode () const;

    /** Setter: the filename.
    @param[in] _filename the name of file where error has occured */
    void SetFilename (const char* _filename);

    /** Getter: the filename. */
    const char* GetFilename () const;

    /** Setter: the line number.
    @param[in] _line the line of the file where error has occured */
    void SetLine (UINT _line);

    /** Getter: the line number. */
    UINT GetLine () const;

    /** Setter: the details.
    @param[in] _details the additional information about error */
    void SetDetails (const char* _details);

    /** Getter: the details. */
    const char* GetDetails () const;

protected:
    ERROR_CODE m_ErrorCode;     /**< Error code. @see ERROR_CODE */
    char m_Filename[MAX_PATH];  /**< The source of the error. */
    UINT m_Line;                /**< The line of the file where error has occured. */
    char m_Details[MAX_PATH];   /**< The additional information about the error. */
    char m_Message[MAX_MSG_LENGTH];   /**< The generated error message. @see MAX_MSG_LENGTH */
};